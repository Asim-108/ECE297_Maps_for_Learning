#include <random>
#include <UnitTest++/UnitTest++.h>

#include "StreetsDatabaseAPI.h"
#include "m1.h"
#include "m3.h"

#include "unit_test_util.h"
#include "path_verify.h"

using ece297test::relative_error;
using ece297test::path_is_legal;


SUITE(path_cost_public) {
struct MapFixture {
    MapFixture() {
        rng = std::minstd_rand(4);
        rand_intersection = std::uniform_int_distribution<IntersectionIdx>(0, getNumIntersections()-1);
        rand_street = std::uniform_int_distribution<StreetIdx>(1, getNumStreets()-1);
        rand_segment = std::uniform_int_distribution<StreetSegmentIdx>(0, getNumStreetSegments()-1);
        rand_poi = std::uniform_int_distribution<POIIdx>(0, getNumPointsOfInterest()-1);
        rand_lat = std::uniform_real_distribution<double>(46.650573730, 46.712596893);
        rand_lon = std::uniform_real_distribution<double>(7.800188065, 7.914441109);
        rand_turn_penalty = std::uniform_real_distribution<double>(0., 30.);
        rand_walking_speed = std::uniform_real_distribution<double>(0.8, 5);
        rand_walking_time_limit = std::uniform_real_distribution<double>(0.0, 300);
    }

    std::minstd_rand rng;
    std::uniform_int_distribution<IntersectionIdx> rand_intersection;
    std::uniform_int_distribution<StreetSegmentIdx> rand_street;
    std::uniform_int_distribution<StreetSegmentIdx> rand_segment;
    std::uniform_int_distribution<POIIdx> rand_poi;
    std::uniform_real_distribution<double> rand_lat;
    std::uniform_real_distribution<double> rand_lon;
    std::uniform_real_distribution<double> rand_turn_penalty;
    std::uniform_real_distribution<double> rand_walking_speed;
    std::uniform_real_distribution<double> rand_walking_time_limit;
};
    TEST(computePathTravelTime) {
        std::vector<StreetSegmentIdx> path;
        double turn_penalty;
        double expected;
        double actual;

        path = {1797, 1798, 1799, 1800, 1801, 1802, 964, 965, 966, 967, 968, 969, 1191};
        turn_penalty = 43.83224127580765384;
        expected = 53.94042035663667889;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {880, 883, 587, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 884, 885, 2156, 645};
        turn_penalty = 0.90258765451972178;
        expected = 78.29401455183318603;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1205, 1206, 1207, 1208, 297, 298, 299, 300, 301, 1209, 1210, 1211, 1212, 2687, 2684, 2685, 1241, 1242};
        turn_penalty = 38.07595966077786898;
        expected = 194.68189801574987996;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1593, 193, 1520, 1519, 339, 340, 377, 248, 247, 166, 874, 109, 795, 256, 255, 259, 978, 977, 976, 110, 354, 355, 356, 2436, 2433, 2434, 2427, 2428, 2429, 2430, 2431, 2432, 2019, 2020, 2021, 2022, 395, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390};
        turn_penalty = 2.68072293181142607;
        expected = 210.81490343622439809;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {347, 348, 1627, 1626, 1625, 1624, 1623, 1622, 1621, 83, 82, 81, 80, 86, 87, 88, 89, 90, 91, 92, 93, 354, 355, 356, 2436, 2433, 2434, 2427, 2428, 2429, 361, 362, 363, 367, 368, 369, 103, 104, 1922, 1177, 1360, 1359, 1358, 1357, 1356, 1355, 497, 498, 700, 699, 698, 697, 696, 695, 694, 693};
        turn_penalty = 3.90960681914189401;
        expected = 267.54535045746632704;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {682, 683, 404, 403, 402, 401, 2653, 2652, 2651, 2650, 2649, 980, 979, 622, 621, 620, 619, 618, 1869, 1868, 1867, 2691, 2690, 2692, 211, 210, 2539, 2536, 2537, 2535, 2529};
        turn_penalty = 44.11521863240028551;
        expected = 272.24835600924689061;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {612, 1420, 2080, 2079, 2083, 285, 2474, 946, 157, 598, 2605, 1037, 597, 2357, 175, 2688, 798, 799, 800, 801, 802, 803, 804, 805, 814, 815, 816, 817, 818, 819, 820, 806, 807, 808, 809, 810, 811, 2395, 2396, 1547, 1548, 1549};
        turn_penalty = 14.24546986562031847;
        expected = 299.73985020543443625;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {355, 356, 2436, 2433, 2434, 2427, 2428, 2429, 2430, 2431, 2432, 2019, 2020, 2021, 2022, 2435, 934, 933, 2450, 2449, 2448, 2447, 2446, 2445, 2444, 2443, 2441, 2440, 2439, 2438, 2451, 1870, 2078, 2437, 2442, 2532, 2530, 2531, 2533, 2534, 2540, 2536, 2537, 770, 2041, 2034, 2632, 214, 215, 2366, 2365, 712, 275, 276, 2045, 2032, 342, 2630};
        turn_penalty = 38.78946586502576110;
        expected = 314.29275424574336739;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {662, 707, 2139, 2140, 2141, 416, 415, 678, 677, 769, 490, 1391, 1390, 1389, 1388, 1387, 1386, 1385, 1384, 1383, 1382, 1381, 1380, 395, 2022, 2021, 2020, 2019, 2432, 2431, 2430, 361, 362, 363, 367, 2029, 435};
        turn_penalty = 10.72199757501731554;
        expected = 337.29420919838997861;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {2077, 875, 876, 877, 879, 878, 495, 494, 493, 2186, 492, 2666, 507, 1273, 673, 1833, 1832, 1831, 1830, 1829, 302, 1869, 1868, 1867, 2691, 2690, 2692, 211, 210, 2539, 2536, 2537, 2535, 2529, 79, 186, 187, 2442, 2437, 2078, 1870, 2451, 2438, 2439, 2440, 2441, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 933, 934, 2435, 2022, 2021, 2020, 2019, 2432, 2431, 2430, 2429, 2428, 2427, 2434, 2433, 2436, 356, 355, 354, 93, 92, 91, 90, 89, 1639, 1640};
        turn_penalty = 0.00000000000000000;
        expected = 337.84156408876390287;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {0, 1, 1998, 53, 52, 51, 2604, 2603, 2562, 2566, 54, 2559, 2172, 1073, 565, 50, 2267, 1997, 48, 2211, 2209, 2524, 2214, 2218, 2219, 2222, 2527, 762, 1862, 1535, 1534, 172, 84, 2037, 47, 2534, 2538, 210, 211, 2692, 2690, 2691, 1867, 1868, 1869, 618, 619};
        turn_penalty = 0.00000000000000000;
        expected = 338.41053038609999248;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1739, 1738, 971, 970, 408, 407, 406, 405, 404, 403, 402, 401, 2653, 2652, 2651, 2650, 2649, 980, 979, 622, 621, 620, 619, 618, 302, 1829, 1830, 676, 2515, 2516, 2517, 2705, 1865, 2374, 693, 694, 695, 696, 697};
        turn_penalty = 32.80671457076476116;
        expected = 342.12813880952666068;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {2641, 2642, 511, 2271, 2272, 125, 512, 514, 2048, 1862, 1535, 1534, 172, 84, 2037, 2033, 2041, 2034, 2632, 214, 215, 2364, 2363, 303, 606, 605, 599, 505, 742, 596, 594, 740, 2356, 595, 796, 593, 812, 2080, 1420, 612, 1942, 1662, 935, 940, 128, 127, 2068, 208, 1663};
        turn_penalty = 5.46601715552688994;
        expected = 344.72486894806820601;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1494, 923, 924, 1893, 1894, 1895, 1903, 1803, 2454, 289, 483, 482, 1631, 1401, 288, 1412, 1411, 1410, 1409, 1416, 1415, 1414, 1413, 168, 203, 204, 1417, 1418, 2073, 2074, 2069, 2070, 2071, 2072, 2090, 975, 974, 973, 921, 1954, 1956, 1955, 253, 252, 257, 795, 109, 871, 1653, 1945, 1944, 1943, 1655, 1652, 939, 940, 1661, 1942, 612, 1420, 2080, 2079, 2083};
        turn_penalty = 7.96910429139791976;
        expected = 349.16402369049490062;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1018, 1019, 1020, 1021, 2409, 2410, 2411, 811, 810, 809, 808, 807, 806, 820, 819, 818, 817, 816, 815, 814, 805, 804, 803, 802, 801, 800, 799, 798, 2688, 175, 2357, 597, 1037, 2605, 813, 593, 796, 611, 601, 283, 284, 739, 604, 272, 607, 608, 609, 610, 2045, 2032, 342, 343, 1008, 1009, 2049, 341, 2036};
        turn_penalty = 6.71398457277002869;
        expected = 365.19513562008933150;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {775, 2244, 773, 772, 1291, 1620, 1610, 2572, 225, 226, 227, 228, 899, 898, 1414, 896, 900, 1875, 895, 1925, 1926, 1927, 1928, 1408, 1407, 1406, 1405, 1404, 2473, 2472, 232, 1514, 1515, 1516, 2234, 2233, 1518, 1519, 1520, 1521, 1522, 1523, 1910, 1734, 1913, 1923, 156, 155, 154, 2354, 153, 2357, 175, 2688, 798, 799, 800, 801, 802, 803, 1128, 1129, 1130};
        turn_penalty = 0.00000000000000000;
        expected = 370.14482709187404907;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {2374, 693, 694, 695, 696, 697, 698, 699, 700, 498, 497, 1355, 1356, 1357, 1358, 1359, 1360, 1177, 1922, 104, 103, 369, 368, 367, 366, 365, 106, 107, 108, 2436, 356, 355, 354, 110, 1369, 1368, 2057, 2056, 2055, 2054, 2053, 2052, 2051, 918, 921, 2089, 2088, 1402, 1403, 2574, 240, 204, 203, 77, 76, 75, 2554, 2568, 2557, 1609, 2572, 1610, 1620, 57, 221, 2716, 220, 219, 58, 2126, 1057, 1056, 1055, 1054, 1892, 1904, 717, 716, 2468, 2469, 715, 714};
        turn_penalty = 4.11236351442220283;
        expected = 373.42068882693195064;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {31, 30, 29, 1415, 1414, 1413, 168, 203, 204, 1417, 1418, 2073, 2074, 2069, 2070, 2071, 2072, 2090, 2060, 2061, 2062, 2063, 72, 90, 91, 92, 93, 354, 355, 356, 2436, 2433, 2434, 2427, 2428, 2429, 2430, 2075};
        turn_penalty = 31.34028327739956765;
        expected = 439.54473399041449966;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1846, 2215, 2528, 762, 1862, 1535, 1534, 172, 84, 2037, 47, 2534, 2538, 210, 211, 2692, 2690, 2691, 1867, 1868, 1869, 618, 619, 620, 621, 622, 979, 980, 2649, 2650, 2651, 2652, 2653, 401, 402, 403, 404, 405, 406, 407, 408, 970, 1757, 1792, 1739, 689, 685, 686, 2148, 2147, 614, 2142, 2145, 2143};
        turn_penalty = 12.86716044314528418;
        expected = 450.21127335363223665;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1191, 1192, 374, 2443, 2441, 2440, 2439, 2438, 2451, 1870, 2078, 2437, 45, 46, 2046, 2047, 1866, 171, 1533, 123, 496, 233, 2523, 2525, 2212, 48, 1997, 2267, 50, 565, 1073, 2172, 2560, 56, 2565, 2563, 792, 793, 794, 2602, 1305, 1047};
        turn_penalty = 27.22910222223687171;
        expected = 451.45644072638071975;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1390, 1389, 1388, 1387, 1386, 1385, 1384, 1383, 1382, 1381, 1380, 395, 2435, 934, 933, 2450, 2449, 2448, 2447, 2446, 2445, 2444, 2443, 2441, 2440, 2439, 2438, 2451, 1870, 2078, 2437, 2442, 2532, 2530, 2531, 2533, 2534, 2540, 2536, 2537, 770, 2041, 2034, 2632, 214, 215, 2364, 2363, 303, 606, 605, 599, 505, 742, 596, 594, 740, 2356, 595, 796, 593, 813, 2605, 1037, 597, 2357, 175, 2688, 798, 799, 800, 801, 802, 803, 804, 805, 814, 815, 816, 817, 818, 819, 820, 806, 807, 808, 809, 810, 811, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 1708, 1707, 2415};
        turn_penalty = 7.92470683533765108;
        expected = 463.80781814911267702;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1836, 1724, 1725, 1726, 866, 500, 2260, 2461, 499, 865, 1907, 1308, 1307, 1306, 1305, 2602, 794, 793, 792, 2564, 54, 2559, 2172, 1073, 565, 50, 2267, 1997, 48, 2211, 2209, 2524, 2214, 2218, 2219, 2222, 2527, 762, 1862, 1535, 1534, 172, 84, 2037, 2033, 2041, 2034, 2632, 214, 215, 2364, 2363, 303, 606, 605, 599, 505, 742, 596, 594, 740, 2356, 595, 796, 593, 812, 2080, 1420, 612, 1942, 1662, 936, 147, 148};
        turn_penalty = 17.26744121680091126;
        expected = 465.98951454403550088;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1655, 1943, 1944, 1945, 2392, 872, 871, 109, 795, 256, 255, 259, 978, 977, 976, 110, 354, 355, 356, 2436, 2433, 2434, 2427, 2428, 2429, 2430, 2431, 2432, 2019, 2020, 2021, 2022, 2435, 934, 933, 370, 371, 372, 373, 1802, 1801, 1800, 1799};
        turn_penalty = 43.34477103046508972;
        expected = 478.11860627638952792;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {2502, 2503, 2105, 2106, 2594, 2108, 2107, 2241, 2171, 2644, 2643, 2512, 2601, 2110, 174, 2167, 2162, 412, 2272, 2331, 43, 2149, 2150, 59, 2155, 1472, 1473, 49, 1846, 2215, 2216, 509, 510, 2217, 2213, 508, 2208, 2525, 2212, 48, 1997, 2267, 50, 565, 1073, 2172, 2560, 56, 2561, 2603, 2604, 51, 52, 53, 1998, 1999, 459, 460, 461, 462, 463, 464};
        turn_penalty = 29.15722898780660799;
        expected = 511.45652081105976094;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {696, 697, 698, 699, 700, 498, 497, 1355, 1356, 1357, 1358, 1359, 1360, 1177, 1922, 104, 103, 369, 368, 367, 366, 365, 106, 107, 108, 2436, 356, 355, 354, 110, 1369, 1368, 2057, 2056, 2055, 2054, 2053, 2052, 2051, 918, 921, 2089, 2088, 1402, 1403, 2574, 240, 204, 203, 168, 1413, 1414, 1415, 1416, 1409, 1410, 1411, 1412, 288, 1401, 1631, 482};
        turn_penalty = 25.16084927376740765;
        expected = 513.46842155429828836;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {873, 166, 1524, 2472, 2473, 1404, 1405, 1406, 1407, 1408, 1928, 1957, 1958, 1959, 77, 76, 75, 2554, 2568, 2557, 1609, 2572, 1610, 1620, 57, 221, 2716, 220, 219, 58, 2126, 1057, 1056, 1055, 1054, 1892, 218, 217, 216, 988, 955, 954, 953, 952, 951, 932, 931, 930, 446, 447, 448, 449, 450, 1978, 1979, 440, 441, 442, 443, 444, 445, 929};
        turn_penalty = 31.07746946120639464;
        expected = 544.65978880777799986;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {2545, 2543, 1460, 2541, 1919, 2249, 1419, 1137, 1138, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 349, 350, 351, 2151, 1612, 1611, 2152, 49, 1846, 2215, 2528, 762, 1862, 1535, 1534, 172, 84, 2037, 2033, 2041, 2034, 2632, 214, 215, 2366, 2365, 712, 275, 276, 2045, 2032, 342, 343, 1008, 1009, 2049, 341, 2036, 1502, 1503, 1504, 1996, 2621, 2620, 2038, 2039};
        turn_penalty = 31.68914896056834252;
        expected = 592.32671872457069639;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1320, 1951, 1911, 1912, 1078, 321, 322, 323, 324, 325, 1234, 182, 181, 180, 179, 178, 177, 176, 304, 758, 757, 756, 308, 307, 306, 305, 32, 33, 265, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1096, 1025, 1465, 1464, 1467, 1468, 2394, 2393, 1523, 1522, 2388, 1593, 193, 1520, 1519, 1518, 1517, 1516, 1515, 1514, 232, 2472, 2473, 1404, 1405, 1406, 1407, 1408, 1928, 1957, 1958, 1959, 77, 76, 75, 2554, 2556, 2549};
        turn_penalty = 29.50603330874932340;
        expected = 682.71319424013233856;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {658, 659, 586, 585, 584, 583, 582, 646, 653, 572, 571, 570, 569, 568, 567, 566, 2649, 980, 979, 622, 621, 620, 619, 618, 1869, 1868, 1867, 2691, 2690, 2692, 211, 210, 2539, 2536, 2537, 770, 2041, 2034, 2632, 214, 215, 2364, 2363, 303, 606, 605, 599, 505, 742, 596, 594, 740, 2356, 595, 796, 593, 813, 2605, 1037, 597, 2357, 175, 2688, 798, 799, 800, 801, 802, 803, 804, 805, 814, 815, 816, 817, 818, 819, 820, 806, 807, 808, 809, 810, 811, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 1890, 1891, 1883, 1884, 1885, 1886, 1887, 1876, 1877, 1878, 797, 854, 855, 984, 985, 986, 987, 1717, 1718, 1719, 1720, 2675, 2676, 2677, 1733};
        turn_penalty = 7.66876581015625014;
        expected = 720.22107645192693326;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

        path = {1731, 1732, 2176, 2177, 2306, 1559, 1573, 1564, 1571, 1560, 1566, 1565, 1568, 1569, 1567, 1727, 1572, 1558, 1574, 1561, 1575, 1576, 1578, 1570, 1563, 1577, 1562, 2117, 2118, 2119, 2120, 502, 1106, 1107, 1108, 1461, 2121, 2122, 2173, 2174, 2175, 1274, 1275, 198, 743, 744, 745, 930, 931, 932, 951, 952, 953, 954, 955, 988, 216, 217, 218, 1892, 1054, 1055, 1056, 1057, 2126, 58, 219, 220, 2716, 221, 57, 1620, 1610, 2572, 1609, 2571, 2558, 2567, 169, 2199, 1460, 2541, 1919, 2249, 1419, 1137, 1138, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1309, 2137, 2136, 2135, 1024, 489, 2138, 398, 397, 2134, 821, 550, 549, 548, 690, 691, 692, 637, 657, 656, 655, 633};
        turn_penalty = 13.71927624544100688;
        expected = 832.80366760113429336;
        actual = computePathTravelTime(path, turn_penalty);
        CHECK(relative_error(expected, actual) < 0.002000000);

    } //computePathTravelTime

} //path_cost_public

